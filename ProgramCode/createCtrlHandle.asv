function [ ctrlHandle ] = createCtrlHandle( filenameExt,filenameRet maxE, maxWindUp, offset )
% Create a PID controller Handle

ctrlHandle = struct();

ctrlHandle.Contrib.P = 0; % Proportional Contribution
ctrlHandle.Contrib.I = 0; % Proportional Contribution
ctrlHandle.Contrib.D = 0; % Proportional Contribution
 
ctrlHandle.SP = 0;   % Set Point
ctrlHandle.CV = 0;   % Current Value

ctrlHandle.PE = 0;   % Previous Error
ctrlHandle.CE = 0;   % Current Error

ctrlHandle.IntE = 0; % Integral summing error
ctrlHandle.PID  = 0; % PID value

ctrlHandle.T      = cputime;   % Previous time the PID was run
ctrlHandle.MAX    = maxE;      % Max return values
ctrlHandle.Windup = maxWindUp; % Integral windup maximum

ctrlHandle.Offset = offset;   % Offset for the PID controller


% Create a matrix that contains all of the for each variable set of gains:
% Extend
gainsMatrixP = xlsread(filename,'proportional');
ctrlHandle.xVal = gainsMatrixP(1,2:end);
ctrlHandle.yVal = gainsMatrixP(2:end,1);
ctrlHandle.Gains.Kp = gainsMatrixP(2:end,2:end);

gainsMatrixD = xlsread(filename,'derivative');
ctrlHandle.Gains.Kd = gainsMatrixD(2:end,2:end);

gainsMatrixI = xlsread(filename,'integral');
ctrlHandle.Gains.Ki = gainsMatrixI(2:end,2:end);
